SigmaWeb 2020-TD Java
------------------------------------------------------------------------------
1JSE-19-Mysql-CORR

1/ Thème
--------------------------
Connexion et interrogation de la base de données: SQL.

2/ Todo
--------------------------
		• Interfacer BDD - Java avec 1 table SQL: Salarie. 
	 	• Effectuer des requêtes sql de type CRUD (search, create, read, update, delete).

3/ Résultats attendus
--------------------------
		• Une base de données doit être créée en amont.
		• Une fois la connexion à la BDD établie, il est possible d'insérer des données, les lire, les mettre à jour, les supprimer...
 	
 	
4/ Notice d'install (hsqldb ou mysql)
--------------------------
Pour HSQLDB:
		4.1/ install hsqldb (ou mysql) depuis
			https://sourceforge.net/projects/hsqldb/files/

		4.2/ le zipper sous softwares par exemple
		(pour wamp installer le wampserver)
		
		4.3/ lancer bin/swingManager
		créer base: dbTest en mode STANDALONE (FILE) (user SA, mdp="")
		(Type: standalone, URL: jdbc:hsqldb:file:dbTest, user=SA, mdp="")
		
		Sous linux:
		cd ../data;
		java -classpath ../lib/hsqldb.jar org.hsqldb.util.DatabaseManagerSwing $1 $2 $3 $4 $5;
		
		Nota
		
		4.4/ créer table EMPLOYEES (avec un nom unique):
		CREATE TABLE EMPLOYEES 
		(ID INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY(START WITH 1) ,
		NAME VARCHAR(50) UNIQUE NOT NULL,
		FIRSTNAME VARCHAR(50) NOT NULL,
		AGE INTEGER NOT NULL,
		SALARY INTEGER NOT NULL)
		// créer une clé
		
		alter table EMPLOYEES add primary key (ID)

ou on utilise MySQL (démarrer Wamp par exemple)		

		4.5/ insérer un contenu (ou deux)
		INSERT INTO EMPLOYEES (NAME, FIRSTNAME, AGE, SALARY) 
			VALUES ('DURAND', 'PAUL', 30, 20000)
		INSERT INTO EMPLOYEES (NAME, FIRSTNAME, AGE, SALARY) 
			VALUES ('DUBOIS', 'Sylvie', 35, 25000)
		
		4.6/ --------------------- DRIVER
		- il est intégré à hsqldb (pour mysql le télécharger)
		-- avec mysql il faut télécharger le driver jdbc ici:
		https://dev.mysql.com/downloads/connector/j/
		
		4.7/-------------------- ECLIPSE
		- créer un projet
		
		4.8/ Eclipse doit le reconnaître: modifier le java build path du projet
		Java buil path/libraries/add external jar, pointer sur lib/hsqldb.jar
		(Referenced libraries doit le contenir au final!)
		-- sous Linux en général il est dans /usr/share/java et les bases dans:
		/home/<nomUser>
		-- avec mysql faut faire pareil (pointer sur le jar jdbc)
		
		4.9/ programme Java de test: (inclusion de packages java.sql)
			public static void main(String[] args) {
				try {
					System.out.println("trying to connect...") ;
					Connection cn = DriverManager.getConnection(
							"jdbc:mysql://localhost:3306/baseTest?useSSL=false&serverTimezone=UTC", "root", "") ;
					System.out.println("Connected...") ;

					String sql =  "select * from EMPLOYEES" ;
					Statement smt = cn.createStatement() ; // création statement
					ResultSet rs = smt.executeQuery(sql) ; // exécution commande
					while (rs.next()) {	// boucle dans la BD, affichage d'un champ
						System.out.println("NOM="+rs.getString("NAME")) ;
					}
					rs.close();
					smt.close();
				}  catch (Exception e) {
					System.out.println(e.getMessage());
				}	
			}
	

5/ Autres solutions, cas dégradés
--------------------------
	• Il est vivement conseillé de procéder au préalable à la modélisation de la BDD grâce à l'UML.
	• Il existe de nombreuses autres BD dont: Oracle, Access, SQL Server, PostgreSQL, MySQL...
	• On peut également travailler avec wamp mais plus lourd.
	• Des méthodes de l'objet PreparedStatement permettent de précompiler des requêtes sql
		grâce à un système à trous et au caractère spécial "?". 
	• La méthode commit() de l'objet Connection permet de valider les instructions sql et leur màj.
	• Les objets ResultSetMetaData et DataBaseMetaData fournissent des renseignements complémentaires (métadonnée = données sur les données),
		respectivement sur la requête et sur la bdd à proprement parlé. 
	
	
6/ Bilan
--------------------------
	• En Java, c'est le pilote JDBC (Java DataBase Connectivity) qui permet de se connecter et d'interagir avec une base de données.
	• La connexion s'effectue principalement grâce à la méthode getConnection() de l'objet DriverManager,
	   qui prend en paramètres l'url, le nom d'utilisateur et le mdp.
	• Statement (PreparedStatement) et ResultSet sont les principaux objets permettant de communiquer avec une bdd.
		- Statement stocke et exécute la requête SQL en interrogeant la bdd;
		- ResultSet récupère les données du résultat retourné et les affiche ligne par ligne.
	• Il existe plusieurs types de requêtes sql.
	
	
	
	
	
	